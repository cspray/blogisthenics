#!/usr/bin/env php
<?php declare(strict_types=1);

if (php_sapi_name() !== 'cli') {
    exit('The blogisthenics CLI tool is not meant to run in non-cli SAPI.');
}

$rootDir = dirname(__DIR__);
require $rootDir . '/vendor/autoload.php';

use Cspray\Blogisthenics\Cli\CliApp;
use Cspray\Blogisthenics\ContextFactory;
use Cspray\Blogisthenics\Engine as BlogisthenicsEngine;
use Cspray\Blogisthenics\FileParser;
use Cspray\Blogisthenics\GitHubFlavoredMarkdownFormatter;
use Cspray\Blogisthenics\InMemoryKeyValueStore;
use Cspray\Blogisthenics\MethodDelegator;
use Cspray\Blogisthenics\SiteGenerator;
use Cspray\Blogisthenics\SiteWriter;
use Cspray\Blogisthenics\TemplateFormatter;
use Laminas\Escaper\Escaper;
use Minicli\App;
use Minicli\ServiceInterface;

$keyValueStore = new InMemoryKeyValueStore();

$templateFormatter = new TemplateFormatter(new GitHubFlavoredMarkdownFormatter());
$contextFactory = new ContextFactory(new Escaper(), new MethodDelegator(), $keyValueStore);

$engine = new BlogisthenicsEngine(
    $rootDir,
    new SiteGenerator($rootDir, new FileParser()),
    new SiteWriter($templateFormatter, $contextFactory),
    $keyValueStore,
    new MethodDelegator()
);

$blogisthenicsService = new class($engine) implements ServiceInterface {

    public function __construct(private readonly BlogisthenicsEngine $engine) {}

    public function load(App $app) : void {
    }

    public function buildSite() : void {
        $this->engine->buildSite();
    }
};

$app = new CliApp();
$app->addService('blogisthenics', $blogisthenicsService);
$app->runCommand($argv);